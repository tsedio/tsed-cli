#!/usr/bin/env node
import {existsSync} from "node:fs";
import {readFile, writeFile} from "node:fs/promises";
import {dirname, join} from "node:path";

import {globby} from "globby";

function resolveConfig() {
  return [join(process.cwd(), ".barrelsby.json"), join(process.cwd(), ".barrels.json")].find((path) => {
    return existsSync(path);
  });
}

async function readJSON(path) {
  const content = await readFile(path, "utf-8");

  return JSON.parse(content);
}

function getConfig() {
  const configPath = resolveConfig();

  if (!configPath) {
    return {};
  }

  return readJSON(configPath);
}

async function cleanIndex(cwd, excluded) {
  const patterns = ["**/index.ts", ...excluded];

  const files = await globby(patterns, {
    cwd: cwd
  });

  return Promise.all(files.map((file) => fs.unlink(join(cwd, file))));
}

async function build() {
  const {
    directory = ["./src"],
    exclude = ["**/__mock__", "**/__mocks__", "**/*.spec.ts", "**/*.benchmark.ts"],
    delete: shouldDelete
  } = await getConfig();

  const excluded = exclude.map((path) => `!${path}`).concat(directory.map((path) => `!${path}/index.ts`));

  const directories = (
    await globby(directory, {
      cwd: process.cwd()
    })
  ).reduce((set, file) => {
    return set.add(dirname(file));
  }, new Set());

  const promises = [...directories.keys()].map(async (directory) => {
    const baseIndex = join(process.cwd(), directory?.path ?? directory);

    const files = await globby(["**/*.ts", "!index.ts", ...excluded], {
      cwd: directory
    });

    const exports = files
      .sort((a, b) => a.localeCompare(b))
      .map((file) => {
        // TODO set .js after all configuration are ok to resolve .js
        return `export * from "./${file.replace(".ts", ".js")}";`;
      });

    const content = ["/**", " * @file Automatically generated by @tsed/barrels.", " */", ...exports];

    await writeFile(join(baseIndex, "index.ts"), content.join("\n") + "\n", {encoding: "utf8"});
  });

  await Promise.all(promises);
}

await build();
