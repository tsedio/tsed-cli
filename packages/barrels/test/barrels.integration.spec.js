import assert from "node:assert";
import * as fs from "node:fs/promises";
import {join} from "node:path";

import {describe, it} from "vitest";

import {generateBarrels} from "../bin/generate-barrel.js";

describe("barrels.integration.ts", () => {
  // eslint-disable-next-line vitest/expect-expect
  it("should generate barrels", async () => {
    const cwd = join(import.meta.dirname, "__mock__");
    // Test code here
    await generateBarrels({
      cwd,
      directory: ["./scenario-1"],
      exclude: ["**/__mock__", "**/__mocks__", "**/*.spec.ts"],
      delete: true
    });

    const result = await fs.readFile(join(cwd, "scenario-1", "index.ts"), "utf-8");

    assert.strictEqual(
      result,
      "/**\n" +
        " * @file Automatically generated by @tsed/barrels.\n" +
        " */\n" +
        'export * from "./file1.js";\n' +
        'export * from "./file2.js";\n' +
        'export * from "./sub-directory/file2.js";\n'
    );
  });

  // eslint-disable-next-line vitest/expect-expect
  it("should generate barrels (with multiple directories)", async () => {
    const cwd = join(import.meta.dirname, "__mock__");
    // Test code here
    await generateBarrels({
      cwd,
      directory: ["./scenario-2/sub-directory-1", "./scenario-2/sub-directory-2"],
      exclude: ["**/__mock__", "**/__mocks__", "**/*.spec.ts"],
      delete: true
    });

    const result = await fs.readFile(join(cwd, "scenario-2", "sub-directory-1", "index.ts"), "utf-8");

    assert.strictEqual(
      result,
      "/**\n" + " * @file Automatically generated by @tsed/barrels.\n" + " */\n" + 'export * from "./file2.js";\n'
    );

    const result1 = await fs.readFile(join(cwd, "scenario-2", "sub-directory-2", "index.ts"), "utf-8");

    assert.strictEqual(
      result1,
      "/**\n" + " * @file Automatically generated by @tsed/barrels.\n" + " */\n" + 'export * from "./file2.js";\n'
    );
  });
  // eslint-disable-next-line vitest/expect-expect
  it("should generate barrels (with multiple directories and nested subdirectories)", async () => {
    const cwd = join(import.meta.dirname, "__mock__");
    // Test code here
    await generateBarrels({
      cwd,
      directory: ["./scenario-3/sub-directory-1", "./scenario-3/sub-directory-2"],
      exclude: ["**/__mock__", "**/__mocks__", "**/*.spec.ts"],
      delete: true
    });

    const result = await fs.readFile(join(cwd, "scenario-2", "sub-directory-1", "index.ts"), "utf-8");

    assert.strictEqual(
      result,
      "/**\n" + " * @file Automatically generated by @tsed/barrels.\n" + " */\n" + 'export * from "./file2.js";\n'
    );

    const result1 = await fs.readFile(join(cwd, "scenario-3", "sub-directory-1", "index.ts"), "utf-8");

    assert.strictEqual(
      result1,
      "/**\n" +
        " * @file Automatically generated by @tsed/barrels.\n" +
        " */\n" +
        'export * from "./file2.js";\n' +
        'export * from "./sub-path/file3.js";\n' +
        'export * from "./sub-path/sub-path2/file4.js";\n' +
        'export * from "./sub-path/sub-path3/file5.js";\n'
    );
  });
});
