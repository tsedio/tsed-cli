// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Init TypeGraphQL project should generate a project with typegraphql 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import \\"@tsed/typegraphql\\";
import \\"./datasources/index\\";
import \\"./resolvers/index\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init TypeGraphQL project should generate a project with typegraphql 3`] = `
"import {readFileSync} from \\"fs\\";
import {envs} from \\"./envs/index\\";
import loggerConfig from \\"./logger/index\\";
const pkg = JSON.parse(readFileSync(\\"./package.json\\", {encoding: \\"utf8\\"}));

export const config: Partial<TsED.Configuration> = {
  version: pkg.version,
  envs,
  logger: loggerConfig,
  graphql: {
    default: {
      path: \\"/graphql\\",
      buildSchemaOptions: {
      }
    }
  },
  // additional shared configuration
};
"
`;
