// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Init TypeGraphQL project > should generate a project with typegraphql 2`] = `
"import {join} from "node:path";
import {Configuration} from "@tsed/di";
import {application} from "@tsed/platform-http";
import "@tsed/platform-log-request"; // remove this import if you don&#x27;t want log request
import "@tsed/platform-express"; // /!\\ keep this import
import "@tsed/ajv";
import "@tsed/typegraphql";
import "./datasources/index.js";
import "./resolvers/index.js";
import {config} from "./config/index.js";
import * as rest from "./controllers/rest/index.js";

@Configuration({
  ...config,
  acceptMimes: ["application/json"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  mount: {
    "/rest": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    "cors",
    "cookie-parser",
    "compression",
    "method-override",
    "json-parser",
    { use: "urlencoded-parser", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), "../views"),
    extensions: {
      ejs: "ejs"
    }
  }
})
export class Server {
  protected app = application();
}
"
`;

exports[`Init TypeGraphQL project > should generate a project with typegraphql 3`] = `
"import {readFileSync} from "node:fs";
import {envs} from "./envs/index.js";
import loggerConfig from "./logger/index.js";
const pkg = JSON.parse(readFileSync("./package.json", {encoding: "utf8"}));

export const config: Partial<TsED.Configuration> = {
  version: pkg.version,
  envs,
  ajv: {
    returnsCoercedValues: true
  },
  logger: loggerConfig,
  graphql: {
    default: {
      path: "/graphql",
      buildSchemaOptions: {
      }
    }
  },
  // additional shared configuration
};
"
`;
