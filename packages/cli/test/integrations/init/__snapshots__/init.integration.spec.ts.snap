// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Init cmd Express.js should generate a project with Arch FEATURE 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import \\"@tsed/swagger\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./rest/index\\";
import * as pages from \\"./pages/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ],
    \\"/\\": [
      ...Object.values(pages)
    ]
  },
  swagger: [
    {
      path: \\"/doc\\",
      specVersion: \\"3.0.1\\"
    }
  ],
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init cmd Express.js should generate a project with Convention ANGULAR 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import \\"@tsed/swagger\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";
import * as pages from \\"./controllers/pages/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ],
    \\"/\\": [
      ...Object.values(pages)
    ]
  },
  swagger: [
    {
      path: \\"/doc\\",
      specVersion: \\"3.0.1\\"
    }
  ],
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init cmd Express.js should generate a project with NPM 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init cmd Express.js should generate a project with swagger 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import \\"@tsed/swagger\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";
import * as pages from \\"./controllers/pages/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ],
    \\"/\\": [
      ...Object.values(pages)
    ]
  },
  swagger: [
    {
      path: \\"/doc\\",
      specVersion: \\"3.0.1\\"
    }
  ],
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init cmd Express.js should generate a project with the right options 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`Init cmd Koa.js should generate a project with the right options 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-koa\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    \\"@koa/cors\\",
    \\"koa-compress\\",
    \\"koa-override\\",
    \\"koa-bodyparser\\"
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;
