import {Configuration, Inject} from "@tsed/di";
import {PlatformApplication} from "@tsed/common";
{{#if express}}import "@tsed/platform-express"; // /!\ keep this import
import bodyParser from "body-parser";
import compress from "compression";
import cookieParser from "cookie-parser";
import methodOverride from "method-override";
import cors from "cors";
{{/if}}{{#if koa}}import "@tsed/platform-koa"; // /!\ keep this import
import bodyParser from "koa-bodyparser";
import compress from "koa-compress";
import cors from "@koa/cors";
{{/if}}
import "@tsed/ajv";{{#if swagger}}
import "@tsed/swagger";{{/if}}{{#if mongoose}}
import "@tsed/mongoose";{{/if}}{{#if typeorm}}
import "@tsed/typeorm";{{/if}}{{#if oidc}}
import "@tsed/oidc-provider";{{/if}}
import {config, rootDir} from "./config";{{#if swagger}}
import {IndexCtrl} from "{{indexControllerPath}}";{{/if}}{{#if oidc}}
import {InteractionsCtrl} from "./controllers/oidc/InteractionsCtrl";{{/if}}{{#if koa}}

const methodOverride = require("koa-override");{{/if}}


@Configuration({
  ...config,
  acceptMimes: ["application/json"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  mount: {
    "{{route}}": [
      `${rootDir}/controllers/**/*.ts`
    ]{{#or swagger oidc}},
    "/": [{{#if swagger}}
      IndexCtrl{{/if}}{{#and swagger oidc}},{{/and}}{{#if oidc}}
      InteractionsCtrl{{/if}}
    ]{{/or}}
  },{{#if swagger}}
  swagger: [
    {
      path: "/v3/docs",
      specVersion: "3.0.1"
    }
  ],{{/if}}
  views: {
    root: `${rootDir}/views`,
    extensions: {
      ejs: "ejs"
    }
  },
  exclude: [
    "**/*.spec.ts"
  ]
})
export class {{symbolName}} {
  @Inject()
  app: PlatformApplication;

  @Configuration()
  settings: Configuration;

  $beforeRoutesInit(): void {
    {{#if express}}
    this.app
      .use(cors())
      .use(cookieParser())
      .use(compress({}))
      .use(methodOverride())
      .use(bodyParser.json())
      .use(bodyParser.urlencoded({
        extended: true
      }));{{/if}}{{#if koa}}
    this.app
      .use(cors())
      .use(compress())
      .use(methodOverride())
      .use(bodyParser()){{/if}}
  }
}
