import {join} from "path";
import {Configuration, Inject} from "@tsed/di";
import {PlatformApplication} from "@tsed/common";
{{#if express}}import "@tsed/platform-express"; // /!\ keep this import
import bodyParser from "body-parser";
import compress from "compression";
import cookieParser from "cookie-parser";
import methodOverride from "method-override";
import cors from "cors";
{{/if}}{{#if koa}}import "@tsed/platform-koa"; // /!\ keep this import
import bodyParser from "koa-bodyparser";
import compress from "koa-compress";
import cors from "@koa/cors";
{{/if}}
import "@tsed/ajv";{{#if swagger}}
import "@tsed/swagger";{{/if}}{{#if mongoose}}
import "@tsed/mongoose";{{/if}}{{#if typeorm}}
import "@tsed/typeorm";{{/if}}{{#if oidc}}
import "@tsed/oidc-provider";{{/if}}
import {config} from "./config";
import * as rest from "./controllers/rest";{{#if swagger}}
import * as pages from "./controllers/pages";{{/if}}{{#if oidc}}
import {InteractionsController} from "./controllers/oidc/InteractionsController";{{/if}}{{#if koa}}

const methodOverride = require("koa-override");{{/if}}

@Configuration({
  ...config,
  acceptMimes: ["application/json"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  componentsScan: false,
  mount: {
    "{{route}}": [
      ...Object.values(rest)
    ]{{#or swagger oidc}},
    "/": [{{#if swagger}}
      ...Object.values(pages){{/if}}{{#and swagger oidc}},{{/and}}{{#if oidc}}
      InteractionsController{{/if}}
    ]{{/or}}
  },{{#if swagger}}
  swagger: [
    {
      path: "/doc",
      specVersion: "3.0.1"
    }
  ],{{/if}}
  middlewares: [{{#if express}}
    cors(),
    cookieParser(),
    compress({}),
    methodOverride(),
    bodyParser.json(),
    bodyParser.urlencoded({
      extended: true
    }){{/if}}{{#if koa}}
    cors(),
    compress({}),
    methodOverride(),
    bodyParser()
    {{/if}}
  ],
  views: {
    root: join(process.cwd(), "../views"),
    extensions: {
      ejs: "ejs"
    }
  },
  exclude: [
    "**/*.spec.ts"
  ]
})
export class {{symbolName}} {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
