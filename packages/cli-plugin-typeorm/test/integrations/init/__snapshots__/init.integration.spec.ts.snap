// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TypeORM: Init cmd should generate a project with the right options 2`] = `
"import {join} from \\"path\\";
import {Configuration, Inject} from \\"@tsed/di\\";
import {PlatformApplication} from \\"@tsed/common\\";
import \\"@tsed/platform-express\\"; // /!\\\\ keep this import
import \\"@tsed/ajv\\";
import {config} from \\"./config/index\\";
import * as rest from \\"./controllers/rest/index\\";

@Configuration({
  ...config,
  acceptMimes: [\\"application/json\\"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  disableComponentsScan: true,
  ajv: {
    returnsCoercedValues: true
  },
  mount: {
    \\"/rest\\": [
      ...Object.values(rest)
    ]
  },
  middlewares: [
    \\"cors\\",
    \\"cookie-parser\\",
    \\"compression\\",
    \\"method-override\\",
    \\"json-parser\\",
    { use: \\"urlencoded-parser\\", options: { extended: true }}
  ],
  views: {
    root: join(process.cwd(), \\"../views\\"),
    extensions: {
      ejs: \\"ejs\\"
    }
  },
  exclude: [
    \\"**/*.spec.ts\\"
  ]
})
export class Server {
  @Inject()
  protected app: PlatformApplication;

  @Configuration()
  protected settings: Configuration;
}
"
`;

exports[`TypeORM: Init cmd should generate a project with the right options 3`] = `
"import {registerProvider} from \\"@tsed/di\\";
import {DataSource} from \\"typeorm\\";
import {Logger} from \\"@tsed/logger\\";

export const MYSQL_DATASOURCE = Symbol.for(\\"MysqlDatasource\\");
export const MysqlDatasource = new DataSource({
  type: \\"mysql\\",
  entities: [],
  host: \\"localhost\\",
  port: 3306,
  username: \\"test\\",
  password: \\"test\\",
  database: \\"test\\"
});

registerProvider<DataSource>({
  provide: MYSQL_DATASOURCE,
  type: \\"typeorm:datasource\\",
  deps: [Logger],
  async useAsyncFactory(logger: Logger) {
    await MysqlDatasource.initialize();

    logger.info(\\"Connected with typeorm to database: Mysql\\");

    return MysqlDatasource;
  },
  hooks: {
    $onDestroy(dataSource) {
      return dataSource.isInitialized && dataSource.close();
    }
  }
});
"
`;

exports[`TypeORM: Init cmd should generate a project with the right options 4`] = `
"import { PlatformTest } from \\"@tsed/common\\";
import { MysqlDatasource } from \\"./MysqlDatasource\\";

describe(\\"MysqlDatasource\\", () => {
  beforeEach(PlatformTest.create);
  afterEach(PlatformTest.reset);

  it(\\"should do something\\", () => {
    const instance = PlatformTest.get<MysqlDatasource>(MysqlDatasource);
    // const instance = PlatformTest.invoke<MysqlDatasource>(MysqlDatasource); // get fresh instance

    expect(instance).toBeInstanceOf(MysqlDatasource);
  });
});
"
`;
