// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TypeORM: Init cmd > should generate a project with the right options 2`] = `
"import "@tsed/ajv";
import "@tsed/platform-log-request";

import { Configuration } from "@tsed/di";
import { application } from "@tsed/platform-http";
import { join } from "node:path";

import { config } from "@/config/config.js";
import "@tsed/platform-express";
import "@tsed/typeorm";
import * as rest from "./controllers/rest/index.js";

@Configuration({
  ...config,
  acceptMimes: ["application/json"],
  httpPort: process.env.PORT || 8083,
  httpsPort: false, // CHANGE
  mount: {
    "/rest": [...Object.values(rest), ...Object.values(rest), ...Object.values(rest)]
  },
  views: {
    root: join(process.cwd(), "../views"),
    extensions: {
      ejs: "ejs"
    }
  },
  middlewares: [
    "cors",
    "cookie-parser",
    "compression",
    "method-override",
    "json-parser",
    {
      "use": "urlencoded-parser",
      "options": {
        "extended": true
      }
    }
  ]
})
export class Server {
  protected app = application();
}
"
`;

exports[`TypeORM: Init cmd > should generate a project with the right options 3`] = `
"import { injectable, logger } from "@tsed/di";
import { DataSource } from "typeorm";

export const mysqlDatasource = new DataSource({
  type: "mysql",
  entities: [],
  host: "localhost",
  port: 3306,
  username: "test",
  password: "test",
  database: "test"
});

export const MysqlDatasource = injectable(Symbol.for("MysqlDatasource"))
  .type("typeorm:datasource")
  .asyncFactory(async () => {
     await mysqlDatasource.initialize();
     
     logger().info("Connected with typeorm to database: Mysql");

     return mysqlDatasource;
  })
  .hooks({
    $onDestroy(dataSource) {
      return dataSource.isInitialized && dataSource.close();
    }
  })
  .token();
  
export type MysqlDatasource = DataSource;
"
`;

exports[`TypeORM: Init cmd > should generate a project with the right options 4`] = `undefined`;
